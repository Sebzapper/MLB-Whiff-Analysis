# -*- coding: utf-8 -*-
"""whiff_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_vebNanRsVEVSuT1-67QhgdfQSR7ZWN
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pybaseball import statcast, playerid_lookup

# Set plot style for better visualization
try:
    plt.style.use('seaborn-v0_8')  # Use legacy seaborn style
except OSError:
    plt.style.use('ggplot')  # Fallback to ggplot if seaborn-v0_8 is unavailable
sns.set_context("notebook", font_scale=1.2)

# Define pitch type classifications
pitch_categories = {
    '4-Seamers': ['FF', 'FA'],
    'Sinkers': ['SI'],
    'Cutters': ['FC'],
    'Sliders': ['SL'],
    'Breaking': ['CU', 'KC', 'SV', 'CS', 'ST'],
    'Offspeed': ['CH', 'FS']
}

# Create reverse mapping for pitch types to categories
pitch_type_to_category = {}
for category, pitch_types in pitch_categories.items():
    for pitch_type in pitch_types:
        pitch_type_to_category[pitch_type] = category
# Default category for unmapped pitch types
default_category = 'Other'

# Step 1: Retrieve Statcast data for 2025 season
start_dt = '2025-03-28'
end_dt = '2025-06-23'

data = statcast(start_dt=start_dt, end_dt=end_dt)

# Step 2: Data Cleaning and Preparation
# Filter for whiff pitches
whiff_pitches = data[data['description'].isin(['swinging_strike', 'swinging_strike_blocked'])].copy()

# Select relevant columns
columns = ['pitch_type', 'game_date', 'release_speed', 'player_name', 'pitcher',
           'plate_x', 'plate_z', 'events', 'description', 'p_throws', 'stand']
whiff_pitches = whiff_pitches[columns]
data = data[columns]  # Also select same columns for total data

# Drop rows with missing critical data
whiff_pitches = whiff_pitches.dropna(subset=['pitch_type', 'release_speed', 'plate_x', 'plate_z'])
data = data.dropna(subset=['pitch_type', 'release_speed', 'plate_x', 'plate_z'])

# Map pitch types to categories
whiff_pitches['pitch_category'] = whiff_pitches['pitch_type'].map(pitch_type_to_category).fillna(default_category)
data['pitch_category'] = data['pitch_type'].map(pitch_type_to_category).fillna(default_category)

# Convert game_date to datetime
whiff_pitches['game_date'] = pd.to_datetime(whiff_pitches['game_date'], errors='coerce')
data['game_date'] = pd.to_datetime(data['game_date'], errors='coerce')

print(f"Total whiff pitches: {len(whiff_pitches)}")
print(whiff_pitches[['pitch_type', 'pitch_category']].head())

# Step 3: Exploratory Data Analysis (EDA) and Plotting
# Create a single figure with subplots (2 rows, 3 columns, removing the last subplot)
fig, axes = plt.subplots(2, 3, figsize=(18, 12), gridspec_kw={'height_ratios': [1, 1]})
fig.suptitle('Analysis of Whiff Pitches (2025)', fontsize=16)

# Flatten axes for easier indexing, remove the last subplot
axes = axes.flatten()
axes[-1].remove()  # Remove the unused sixth subplot
ax1, ax2, ax3, ax4, ax5 = axes[:5]  # Assign to individual axes

# 3.1: Whiff Pitches by Pitch Category
whiff_by_pitch_category = whiff_pitches['pitch_category'].value_counts()
whiff_by_pitch_category.plot(kind='bar', color='skyblue', ax=ax1)
ax1.set_title('Whiff Pitches by Pitch Category')
ax1.set_xlabel('Pitch Category')
ax1.set_ylabel('Number of Whiff Pitches')
ax1.tick_params(axis='x', rotation=45)

# 3.2: Pitch Location Heatmap for Whiffs
# Define strike zone boundaries (approximate, in feet)
strike_zone = {
    'x_left': -0.83,  # ~10 inches left of plate center
    'x_right': 0.83,  # ~10 inches right of plate center
    'z_top': 3.5,     # Top of strike zone (average)
    'z_bottom': 1.5   # Bottom of strike zone (average)
}
sns.kdeplot(data=whiff_pitches, x='plate_x', y='plate_z', cmap='Reds', fill=True, alpha=0.7, ax=ax2)
ax2.plot([strike_zone['x_left'], strike_zone['x_right'], strike_zone['x_right'],
          strike_zone['x_left'], strike_zone['x_left']],
         [strike_zone['z_bottom'], strike_zone['z_bottom'], strike_zone['z_top'],
          strike_zone['z_top'], strike_zone['z_bottom']],
         color='black', linewidth=2, label='Strike Zone')
ax2.set_title('Heatmap of Whiff Pitch Locations')
ax2.set_xlabel('Horizontal Location (plate_x, feet)')
ax2.set_ylabel('Vertical Location (plate_z, feet)')
ax2.legend()
ax2.set_xlim(-2, 2)
ax2.set_ylim(0, 5)

# 3.3: Whiff Pitches by Release Speed
sns.boxplot(x='pitch_category', y='release_speed', data=whiff_pitches, palette='Set2', ax=ax3)
ax3.set_title('Release Speed of Whiff Pitches')
ax3.set_xlabel('Pitch Category')
ax3.set_ylabel('Release Speed (mph)')
ax3.tick_params(axis='x', rotation=45)

# 3.4: Top Pitchers by Whiff Rate
total_pitches = data.groupby('player_name').size().reset_index(name='total_pitches')
whiff_counts = whiff_pitches.groupby('player_name').size().reset_index(name='whiff_pitches')
whiff_rate = pd.merge(total_pitches, whiff_counts, on='player_name', how='left')
whiff_rate['whiff_pitches'] = whiff_rate['whiff_pitches'].fillna(0)
whiff_rate['whiff_rate'] = whiff_rate['whiff_pitches'] / whiff_rate['total_pitches']
whiff_rate = whiff_rate[whiff_rate['total_pitches'] >= 250]
top_whiff_pitchers = whiff_rate.sort_values('whiff_rate', ascending=False).head(10)
sns.barplot(x='whiff_rate', y='player_name', data=top_whiff_pitchers, palette='viridis', ax=ax4)
ax4.set_title('Top 10 Pitchers by Whiff Rate')
ax4.set_xlabel('Whiff Rate (Whiffs per Pitch)')
ax4.set_ylabel('Pitcher')

# 3.5: Player-Specific Analysis (Kevin Gausman) - Plot this first in ax5
try:
    first_name = 'Kevin'
    last_name = 'Gausman'
    player_name = f"{first_name} {last_name}"
    player_info = playerid_lookup(last_name, first_name)
    if player_info.empty:
        raise IndexError(f"Player ID for {player_name} not found. Please verify the name or ID.")
    player_id = player_info['key_mlbam'].iloc[0]

    player_whiffs = whiff_pitches[whiff_pitches['pitcher'] == player_id].copy()
    if player_whiffs.empty:
        print(f"No whiff pitches found for {player_name} in the dataset.")
        ax5.text(0.5, 0.5, f"No Whiff Pitches for {player_name}",
                 horizontalalignment='center', verticalalignment='center',
                 transform=ax5.transAxes)
    else:
        player_whiffs['plate_x'] = player_whiffs['plate_x'].astype('float64')
        player_whiffs['plate_z'] = player_whiffs['plate_z'].astype('float64')
        player_whiffs['release_speed'] = player_whiffs['release_speed'].astype('float64')
        bins = [0, 80, 90, 100, float('inf')]
        labels = ['<80 mph', '80-90 mph', '90-100 mph', '>100 mph']
        player_whiffs['speed_bin'] = pd.cut(player_whiffs['release_speed'], bins=bins, labels=labels, include_lowest=True)

        sns.scatterplot(
            x='plate_x', y='plate_z', hue='pitch_category', size='speed_bin',
            sizes=(20, 200), data=player_whiffs, alpha=0.6, ax=ax5
        )
        ax5.plot(
            [strike_zone['x_left'], strike_zone['x_right'], strike_zone['x_right'],
             strike_zone['x_left'], strike_zone['x_left']],
            [strike_zone['z_bottom'], strike_zone['z_bottom'], strike_zone['z_top'],
             strike_zone['z_top'], strike_zone['z_bottom']],
            color='black', linewidth=2, label='Strike Zone'
        )
        ax5.legend(title='Pitch Type / Velocity', loc='center left', bbox_to_anchor=(1, 0.5), fontsize=8)
        ax5.set_title(f"{player_name}'s Whiff Pitch Locations")
        ax5.set_xlabel('Horizontal Location (plate_x, feet)')
        ax5.set_ylabel('Vertical Location (plate_z, feet)')
        ax5.set_xlim(-2, 2)
        ax5.set_ylim(0, 5)
except IndexError as e:
    print(f"Player ID for {player_name} not found. Please verify the name or ID.")
    ax5.text(0.5, 0.5, f"Player ID Not Found for {player_name}",
             horizontalalignment='center', verticalalignment='center',
             transform=ax5.transAxes)
except Exception as e:
    print(f"Error in player-specific analysis: {e}")
    ax5.text(0.5, 0.5, f"Error for {player_name}",
             horizontalalignment='center', verticalalignment='center',
             transform=ax5.transAxes)

# Adjust layout to prevent overlap
plt.tight_layout(rect=[0, 0, 1, 0.95])  # Leave space for suptitle

# Save the combined figure locally
output_file = 'combined_whiff_analysis.png'
plt.savefig(output_file, dpi=300, bbox_inches='tight')
print(f"Figure saved as {output_file}")

# Close the figure to free memory
plt.close(fig)